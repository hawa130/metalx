syntax = "proto3";

import "shared.proto";

option go_package = "github.com/hawa130/metalx/pb";

service Controller { // Controller node, responsible for managing edge agents.
  rpc ping(Empty) returns (Empty); // Ping the controller, used to check if controller is online and reachable
  rpc registerAgent(AgentId) returns (Empty); // Register a new agent, called when edge agent becomes online
  rpc unregisterAgent(Empty) returns (Empty); // Unregister an agent, called when edge agent becomes offline
  rpc listenTask(Empty) returns (stream Task); // Agent listen for tasks; Controller push task to agent
  rpc notifyTaskResult(TaskResult) returns (Empty); // Notify task results to controller
  rpc streamTaskLog(stream Log) returns (Empty); // Stream task log to controller
  rpc streamEvent(stream Event) returns (Empty); // Stream agent event to controller
}

message AgentId {
  bytes id = 1; // Agent identifier, generated by edge agent from its own information (e.g. CPU ID), should be unique
}

enum TaskType {
  Nothing = 0; // Do nothing
  FileDownload = 10; // Download a file from a URL
  FileUpload = 20; // Upload a file to a URL
  Command = 30; // Execute a command
}

message Task {
  int64 task_id = 1; // Task ID, used to identify the task
  TaskType type = 10; // Type of the task
  optional string url = 20; // URL of the file to download or upload
  string path = 30; // Path of the file to download or upload, or executable file to execute
  repeated string args = 40; // Arguments for the command
}

message Log {
  int64 task_id = 1; // Task ID
  repeated string message = 10; // Log message
}

message Event {
  string token = 1; // Token obtained from controller, to identify the agent
  string event = 10; // Event type
  repeated bytes args = 20; // Event arguments
}

message TaskResult {
  int64 task_id = 1;
  int32 exitCode = 10;
}
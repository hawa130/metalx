syntax = "proto3";

import "shared.proto";

option go_package = "baremetalcloud/proto";

service Controller { // Controller node, responsible for managing edge agents.
  rpc ping(Empty) returns (Empty) {} // Ping the controller, used to check if controller is online and reachable
  rpc registerAgent(RegisterAgentRequest) returns (RegisterAgentResponse) {} // Register a new agent, called when edge agent becomes online
  rpc unregisterAgent(Empty) returns (Empty) {} // Unregister an agent, called when edge agent becomes offline
  rpc getTask(GetTaskRequest) returns (GetTaskResponse) {} // Agent requests for a task, called when edge agent is ready to receive a new task
  rpc streamingLog(stream Log) returns (Empty) {} // Stream log from agent to controller
  rpc event(Event) returns (Empty) {} // Send agent event to controller
}

message RegisterAgentRequest {
  string id = 1; // Agent identifier, generated by edge agent from its own information (e.g. CPU ID) or user-defined, maybe duplicated with others nodes
  string ip = 2; // Agent IP address, can be accessed by controller node
  int32 port = 3; // Agent port, can be accessed by controller node
}

message RegisterAgentResponse {
  int32 success = 1; // 0 for success, others for failure
  string token = 2; // Token for agent to communicate with controller, generated by controller, should be unique
}

message GetTaskRequest {
  string token = 1; // Token obtained from controller, to identify the agent
  string current_state = 2; // Current state of the agent, used to determine what task to assign
}

enum TaskType {
  FileDownload = 0; // Download a file from a URL
  FileUpload = 1; // Upload a file to a URL
  Command = 2; // Execute a command
}

message Task {
  TaskType type = 1; // Type of the task
  optional string url = 2; // URL of the file to download or upload
  string path = 3; // Path of the file to download or upload, or executable file to execute
  repeated string args = 4; // Arguments for the command
}

message GetTaskResponse {
  int64 task_id = 1; // Task ID, used to identify the task
  string next_state = 2; // next state of the agent if task succeed. controller DO NOT maintain the state of agent
  string next_state_failure = 3; // next state of the agent if task failed. controller DO NOT maintain the state of agent
  Task task = 4; // Task to be executed by agent
  bool streamingLog = 5; // Whether to stream log to controller
}

message Log {
  string token = 1; // Token obtained from controller, to identify the agent
  int64 task_id = 2; // Task ID
  string message = 3; // Log message
}

message Event {
  string token = 1; // Token obtained from controller, to identify the agent
  string event = 2; // Event type
  repeated bytes args = 3; // Event arguments
}